// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package maths

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MathsClient is the client API for Maths service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathsClient interface {
	Squares(ctx context.Context, opts ...grpc.CallOption) (Maths_SquaresClient, error)
}

type mathsClient struct {
	cc grpc.ClientConnInterface
}

func NewMathsClient(cc grpc.ClientConnInterface) MathsClient {
	return &mathsClient{cc}
}

func (c *mathsClient) Squares(ctx context.Context, opts ...grpc.CallOption) (Maths_SquaresClient, error) {
	stream, err := c.cc.NewStream(ctx, &Maths_ServiceDesc.Streams[0], "/maths.Maths/Squares", opts...)
	if err != nil {
		return nil, err
	}
	x := &mathsSquaresClient{stream}
	return x, nil
}

type Maths_SquaresClient interface {
	Send(*SquaresRequest) error
	Recv() (*SquaresResponse, error)
	grpc.ClientStream
}

type mathsSquaresClient struct {
	grpc.ClientStream
}

func (x *mathsSquaresClient) Send(m *SquaresRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mathsSquaresClient) Recv() (*SquaresResponse, error) {
	m := new(SquaresResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MathsServer is the server API for Maths service.
// All implementations must embed UnimplementedMathsServer
// for forward compatibility
type MathsServer interface {
	Squares(Maths_SquaresServer) error
	mustEmbedUnimplementedMathsServer()
}

// UnimplementedMathsServer must be embedded to have forward compatible implementations.
type UnimplementedMathsServer struct {
}

func (UnimplementedMathsServer) Squares(Maths_SquaresServer) error {
	return status.Errorf(codes.Unimplemented, "method Squares not implemented")
}
func (UnimplementedMathsServer) mustEmbedUnimplementedMathsServer() {}

// UnsafeMathsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathsServer will
// result in compilation errors.
type UnsafeMathsServer interface {
	mustEmbedUnimplementedMathsServer()
}

func RegisterMathsServer(s grpc.ServiceRegistrar, srv MathsServer) {
	s.RegisterService(&Maths_ServiceDesc, srv)
}

func _Maths_Squares_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MathsServer).Squares(&mathsSquaresServer{stream})
}

type Maths_SquaresServer interface {
	Send(*SquaresResponse) error
	Recv() (*SquaresRequest, error)
	grpc.ServerStream
}

type mathsSquaresServer struct {
	grpc.ServerStream
}

func (x *mathsSquaresServer) Send(m *SquaresResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mathsSquaresServer) Recv() (*SquaresRequest, error) {
	m := new(SquaresRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Maths_ServiceDesc is the grpc.ServiceDesc for Maths service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Maths_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maths.Maths",
	HandlerType: (*MathsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Squares",
			Handler:       _Maths_Squares_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/maths/maths.proto",
}
